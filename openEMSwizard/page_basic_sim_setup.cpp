#include "page_basic_sim_setup.h"
#include <QDebug>

PageBasicSimSetup::PageBasicSimSetup(QWizard *parent)
{
    QVBoxLayout *layout_page_basic_sim_setup = new QVBoxLayout(this);
    ConfigSimPar();
    layout_page_basic_sim_setup->addWidget(group_box_sim_par);
    setLayout(layout_page_basic_sim_setup);
}

bool PageBasicSimSetup::validatePage()
{
    SaveToSimScriptBuffer();
    return true;
}

void PageBasicSimSetup::SaveToSimScriptBuffer(void)
{
    text_save_to_simscript.clear();
    text_save_to_simscript.append("##<OUTPUT_AUTOGENERATED_PageBasicSimSetup>##\n");
    text_save_to_simscript.append("physical_constants;\n");
    text_save_to_simscript.append(QString("fmin = %1 * %2;\n").arg(text_fmin->text()).arg(GetFreqMultiplier()));
    text_save_to_simscript.append(QString("fmax = %1 * %2;\n").arg(text_fmax->text()).arg(GetFreqMultiplier()));
    text_save_to_simscript.append(QString("FDTD = InitFDTD(%1);\n").arg(ReturnConfigFDTD()));

    /*
    FDTD = SetGaussExcite(FDTD, (fmax+fmin)/2, (fmax-fmin)/2);  #finite energy excitation
    BC = {'MUR' 'MUR' 'MUR' 'MUR' 'PEC' 'MUR'}; #boundary conditions: absorber around, conductor on bottom
    FDTD = SetBoundaryCond(FDTD, BC);
    */
    text_save_to_simscript.append("##<END_OUTPUT_AUTOGENERATED_PageBasicSimSetup>##\n");
    qDebug("%s", qUtf8Printable(text_save_to_simscript));
}

QString PageBasicSimSetup::ReturnConfigFDTD(void)
{
    QString init_fdtd_line;
/*
    init_ftdt_param_NrTS = new QLineEdit(this);
    init_ftdt_param_EndCriteria = new QLineEdit(this);
    init_ftdt_param_MaxTime = new QLineEdit(this);
    init_ftdt_param_OverSampling = new QLineEdit(this);
    init_ftdt_param_CoordSystem = new QLineEdit(this);
    init_ftdt_param_MultiGrid = new QLineEdit(this);
    init_ftdt_param_TimeStep = new QLineEdit(this);
    init_ftdt_param_TimeStepFactor = new QLineEdit(this);
    init_ftdt_param_TimeStepMethod = new QLineEdit(this);
    init_ftdt_param_CellConstantMaterial = new QLineEdit(this);*/
/*
    if(!init_ftdt_param_NrTS->isEmpty())
        init_fdtd_line->append(QString("NrTS, %1\n").arg(init_ftdt_param_NrTS));
    if(!init_ftdt_param_EndCriteria->isEmpty())
        init_fdtd_line->append(QString("EndCriteria, %1\n").arg(init_ftdt_param_EndCriteria));
    if(!init_ftdt_param_MaxTime->isEmpty())
        init_fdtd_line->append(QString("MaxTime, %1\n").arg(init_ftdt_param_MaxTime));
    if(!init_ftdt_param_OverSampling->isEmpty())
        init_fdtd_line->append(QString("OverSampling, %1\n").arg(init_ftdt_param_OverSampling));
    if(!init_ftdt_param_CoordSystem->isEmpty())
        init_fdtd_line->append(QString("CoordSystem, %1\n").arg(init_ftdt_param_CoordSystem));
    if(!init_ftdt_param_MultiGrid->isEmpty())
        init_fdtd_line->append(QString("MultiGrid, %1\n").arg(init_ftdt_param_MultiGrid));
    if(!init_ftdt_param_TimeStep->isEmpty())
        init_fdtd_line->append(QString("TimeStep, %1\n").arg(init_ftdt_param_TimeStep));
    if(!init_ftdt_param_TimeStepFactor->isEmpty())
        init_fdtd_line->append(QString("TimeStepFactor, %1\n").arg(init_ftdt_param_TimeStepFactor));
    if(!init_ftdt_param_TimeStepMethod->isEmpty())
        init_fdtd_line->append(QString("TimeStepMethod, %1\n").arg(init_ftdt_param_TimeStepMethod));
    if(!init_ftdt_param_CellConstantMaterial->isEmpty())
        init_fdtd_line->append(QString("CellConstantMaterial, %1\n").arg(init_ftdt_param_CellConstantMaterial));
*/
    return init_fdtd_line;
}

void PageBasicSimSetup::ReadFromSimScriptBuffer(void)
{

}


void PageBasicSimSetup::ConfigSimPar(void)
{
    group_box_sim_par = new QGroupBox(tr("simulation parameters"), this);
    grid_sim_par = new QGridLayout(this);
    grid_sim_par->setSizeConstraint(QLayout::SetFixedSize);
    grid_sim_par->setColumnMinimumWidth(3, 50);

    QLabel *statictext_freq = new QLabel("frequency", this);
    text_fmin = new QLineEdit(this);
    QLabel *statictext_freqhypen = new QLabel(" - ", this);
    text_fmax = new QLineEdit(this);
    combo_frequnit = new QComboBox(this);
    combo_frequnit->addItem("GHz");
    combo_frequnit->addItem("MHz");
    combo_frequnit->addItem("kHz");
    combo_frequnit->addItem("Hz");

    grid_sim_par->addWidget(statictext_freq, 1, 0, Qt::AlignRight);
    grid_sim_par->addWidget(text_fmin, 1, 1, Qt::AlignLeft);
    grid_sim_par->addWidget(statictext_freqhypen, 1, 2, Qt::AlignLeft);
    grid_sim_par->addWidget(text_fmax, 1, 3, Qt::AlignLeft);
    grid_sim_par->addWidget(combo_frequnit, 1, 4, Qt::AlignLeft);

    group_box_sim_par->setLayout(grid_sim_par);
}
